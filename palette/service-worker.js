self.addEventListener("install",function(e){e.waitUntil(caches.open("app-cache").then(function(e){return e.addAll(["index.html","manifest.json","css/style.css","js/script.js"])}))}),self.addEventListener("fetch",function(e){e.respondWith(fetch(e.request).catch(function(){return caches.match(e.request)}))});const version="201904300000::",coreCacheName=version+"core",pagesCacheName=version+"pages",assetsCacheName=version+"assets",coreCacheUrls=["/","/about/","/offline/","/css/style.css","/javascripts/site.js","/images/afasterweb-logo-white.png","/images/profile-image-300.jpg"];function updateCoreCache(){return caches.open(coreCacheName).then(e=>e.addAll(coreCacheUrls))}function addToCache(e,t,n){caches.open(e).then(e=>e.put(t,n))}function clearCaches(){return caches.keys().then(function(e){return Promise.all(e.filter(function(e){return 0!==e.indexOf(version)}).map(function(e){return caches.delete(e)}))})}self.addEventListener("install",e=>{e.waitUntil(updateCoreCache().then(()=>self.skipWaiting()))}),self.addEventListener("activate",e=>{e.waitUntil(clearCaches().then(()=>self.clients.claim()))}),self.addEventListener("message",e=>{"trimCaches"==e.data.command&&(trimCache(pagesCacheName,20),trimCache(assetsCacheName,20))}),self.addEventListener("fetch",e=>{let t=e.request,n=t.headers.get("Accept");shouldFetch(e)?-1!==n.indexOf("text/html")?e.respondWith(fetch(t).then(e=>(e.ok&&addToCache(pagesCacheName,t,e.clone()),e)).catch(()=>caches.match(t).then(e=>e||caches.match("/offline/")))):-1==n.indexOf("text/html")&&e.respondWith(caches.match(t).then(e=>e||fetch(t).then(e=>(e.ok&&addToCache(assetsCacheName,t,e.clone()),e)).catch(()=>new Response('<svg role="img" aria-labelledby="offline-title" viewBox="0 0 400 300" xmlns="http://www.w3.org/2000/svg"><title id="offline-title">Offline</title><g fill="none" fill-rule="evenodd"><path fill="#D8D8D8" d="M0 0h400v300H0z"/><text fill="#9B9B9B" font-family="Helvetica Neue,Arial,Helvetica,sans-serif" font-size="72" font-weight="bold"><tspan x="93" y="172">offline</tspan></text></g></svg>',{headers:{"Content-Type":"image/svg+xml"}})))):e.respondWith(fetch(t).catch(()=>caches.match("/offline/")))}),self.addEventListener("message",e=>{if("getOfflinePages"==e.data.command){console.log("inside SW message handler");let t=[];caches.open(pagesCacheName).then(function(n){n.keys().then(function(a){a.forEach(function(a,s,c){(function(e,t){return e.match(t).then(e=>e.text().then(function(e){try{let n=e.match(/<title>([^<]+)<\/title>/)[1],a=e.match(/<meta name="description" content="([^"]*?)">/)[1],s=new URL(t.url).pathname;return{title:n,description:a,url:s}}catch(e){console.log("error in meta parsing",e)}}))})(n,a).then(n=>{n&&t.push(n),s==c.length-1&&(console.log("meta",e.ports[0],t),e.ports[0].postMessage({offlinePages:t}))})})})}).catch(e=>{console.log(e)})}});